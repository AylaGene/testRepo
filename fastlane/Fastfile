# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.68.0"

default_platform :android

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "assembleRelease")
    crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "assembleRelease")
    supply
  end

  desc "make a hotfix release, developers make a PR from hotfix branch to master branch, merge PR, than run command like"
  desc " fastlane hotfix_release version_number:\"1.0.28\" release_title:\"1.0.28 Release\" release_notes:\"1: eat well; 2: sleep well."
  lane :hotfix_release do |options|
    release_number= options[:version_number]
    v="v"+release_number
    git_command(full_command: "git checkout master")
    ensure_git_branch(branch: "master")

    # add release notes to README.md file
    file_contents = File.read("../README.md")
    file_contents.gsub!(/Release Notes\n=============/, "Release Notes\n=============\n" + options[:release_title] + "\n" + options[:release_notes] + "\n")
    File.write("../README.md", file_contents)

    # modify version number (todo)

    git_add(path: ".")
    git_commit(path: ".", message: "modify version number and add release notes for " + v)
    push_to_git_remote(remote: "origin");
    git_pull
    ensure_git_status_clean
    push_to_git_remote(remote: "public");
    # draft publish which will create the tag on public
    set_github_release(api_token: ENV["GITHUB_API_TOKEN"], repository_name: "AylaGene/testRepo_Public", tag_name: v, name: v+" Release", description: options[:release_title] + options[:release_notes])
    # pull tag to local
    git_command(full_command: "git pull public master --tags");
    # push tag to origin
    push_to_git_remote(remote: "origin");

    # create a release branch
    git_command(full_command: "git checkout -b release/#{release_number} #{v}")
    git_command(full_command: "git push -u origin release/#{release_number}")
    git_command(full_command: "git push public release/#{release_number}")

    # create PR to merge master back to develop and notify tech lead
    # send release notification email
  end

  desc "make a release which differentiates from hotfix releases in the following way: 1) developers should have already added release notes since it is long;"
  desc " 2) there is already a release/x.y.z branch existing. Developers make a PR from release branch to master branch, release engineer merges PR, than run command like"
  desc " fastlane release version_number:\"1.3.00\""
  lane :release do |options|
    release_number= options[:version_number]
    v="v"+release_number
    git_command(full_command: "git checkout master")
    ensure_git_branch(branch: "master")

    # modify version number(todo)

    #git_add(path: ".")
    #git_commit(path: ".", message: "modify version number for " + v)
    #push_to_git_remote(remote: "origin");
    git_pull
    ensure_git_status_clean
    push_to_git_remote(remote: "public");
    #draft publish which will create the tag on public
    set_github_release(api_token: ENV["GITHUB_API_TOKEN"], repository_name: "AylaGene/testRepo_Public", tag_name: v, name: v+" Release", description: "see README.md for details")
    # pull tag to local
    git_command(full_command: "git pull public master --tags");
    # push tag to origin
    push_to_git_remote(remote: "origin");

    # push a release branch
    git_command(full_command, "git checkout release/#{release_number}")
    git_pull
    ensure_git_branch(branch: "release/#{release_number}")
    ensure_git_status_clean
    git_command(full_command: "git push public release/#{release_number}")

    # create PR to merge master back to develop and notify tech lead
    # send release notification email
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
